(ns cludoku.solver-test
  (:use clojure.test
        cludoku.board
        cludoku.solver))

(deftest solver
  (testing "Can remove doubles from a set of cells"
    (is (= (naked-pairs {[0 0] #{2 4}, [0 1] #{1 2 3 4 5},
                            [0 2] #{2 4}, [0 3] #{7 8 9},
                            [0 4] #{1 3 5}, [0 5] #{6 8},
                            [0 6] #{5 7 9}, [0 7] #{3 4 5 6},
                            [0 8] #{3 5 6 7}})
           {[0 1] #{1 3 5} [0 7] #{3 5 6}})))

  (testing "Doesn't try to remove doubles if there are no real doubles"
    (is (= (naked-pairs {[0 0] #{2 4}, [0 1] #{1 2 3 4 5},
                            [0 2] #{2 4 5}, [0 3] #{7 8 9},
                            [0 4] #{1 3 5}, [0 5] #{6 8},
                            [0 6] #{5 7 9}, [0 7] #{3 4 5 6},
                            [0 8] #{3 5 6 7}})
           {})))

  (testing "A candidate is chosen when it only appears in one cell"
    (is (= (single-cell-candidate {[0 0] #{3 4} [0 1] #{3 4 9} [0 2] #{8}
                                   [1 0] #{2 4 5} [1 1] #{4 5 9} [1 2] #{5 9}
                                   [2 0] #{6} [2 1] #{1 3 4 5} [2 2] #{7}})
           {[1 0] #{2} [2 1] #{1}})))

  (testing "Candidates are removed using horizontal candidate lines"
    (is (= (candidate-lines {:block-height 2
                             :block-width 2
                             :cells {[0 0] #{1 2 3 4} [0 1] #{1 2 3 4} [0 2] #{1 2 3 4} [0 3] #{1 2 3 4}
                                     [1 0] #{1 2 3 4} [1 1] #{1 2 3 4} [1 2] #{1 2 3 4} [1 3] #{1 2 3 4}
                                     [2 0] #{1 3 4}   [2 1] #{1 3 4}   [2 2] #{1 2 3 4} [2 3] #{1 2 3 4}
                                     [3 0] #{1 2 3 4} [3 1] #{1 2 3 4} [3 2] #{1 2 3 4} [3 3] #{1 2 3 4}}})
           {[3 2] #{1 3 4} [3 3] #{1 3 4}})))

  (testing "Candidates are removed using vertical candidate lines"
    (is (= (candidate-lines {:block-height 2
                             :block-width 2
                             :cells {[0 0] #{1 2 3 4} [0 1] #{1 2 3 4} [0 2] #{1 2 3 4} [0 3] #{1 2 3 4}
                                     [1 0] #{1 2 3 4} [1 1] #{1 2 3 4} [1 2] #{1 2 3 4} [1 3] #{1 2 3 4}
                                     [2 0] #{1 3 4}   [2 1] #{1 2 3 4} [2 2] #{1 2 3 4} [2 3] #{1 2 3 4}
                                     [3 0] #{1 3 4}   [3 1] #{1 2 3 4} [3 2] #{1 2 3 4} [3 3] #{1 2 3 4}}})
           {[0 1] #{1 3 4} [1 1] #{1 3 4}})))

  (testing "'Candidates lines' doesn't produce spurious updates"
    (is (= (candidate-lines {:block-height 3
                             :block-width 3
                             :cells {[0 0] #{3 4} [0 1] #{3 4 9} [0 2] #{8} [0 3] #{7 9} [0 4] #{6} [0 5] #{5} [0 6] #{1} [0 7] #{2} [0 8] #{4 7}
                                     [1 0] #{2} [1 1] #{4 5 9} [1 2] #{5 9} [1 3] #{7 8 9} [1 4] #{3} [1 5] #{1} [1 6] #{4 8} [1 7] #{7 8} [1 8] #{6}
                                     [2 0] #{6} [2 1] #{1} [2 2] #{7} [2 3] #{2 8} [2 4] #{4 8} [2 5] #{2 4 8} [2 6] #{3 4 5 8} [2 7] #{9} [2 8] #{3 4 5}
                                     [3 0] #{1 2 3 4 5 6 7 8 9} [3 1] #{1 2 3 4 5 6 7 8 9} [3 2] #{1 2 3 4 5 6 7 8 9} [3 3] #{1 2 3 4 5 6 8} [3 4] #{1 2 3 4 5 6 7 8 9} [3 5] #{1 2 3 4 5 6 7 8 9} [3 6] #{1 2 3 4 5 6 7 8 9} [3 7] #{1 2 3 4 5 6 7 8 9} [3 8] #{1 2 3 4 5 6 7 8 9}
                                     [4 0] #{1 2 3 4 5 6 7 8 9} [4 1] #{1 2 3 4 5 6 7 8 9} [4 2] #{1 2 3 4 5 6 7 8 9} [4 3] #{1 2 3 4 5 6 8} [4 4] #{1 2 3 4 5 6 7 8 9} [4 5] #{1 2 3 4 5 6 7 8 9} [4 6] #{1 2 3 4 5 6 7 8 9} [4 7] #{1 2 3 4 5 6 7 8 9} [4 8] #{1 2 3 4 5 6 7 8 9}
                                     [5 0] #{1 2 3 4 5 6 7 8 9} [5 1] #{1 2 3 4 5 6 7 8 9} [5 2] #{1 2 3 4 5 6 7 8 9} [5 3] #{1 2 3 4 5 6 8} [5 4] #{1 2 3 4 5 6 7 8 9} [5 5] #{1 2 3 4 5 6 7 8 9} [5 6] #{1 2 3 4 5 6 7 8 9} [5 7] #{1 2 3 4 5 6 7 8 9} [5 8] #{1 2 3 4 5 6 7 8 9}
                                     [6 0] #{1 2 3 4 5 6 7 8 9} [6 1] #{1 2 3 4 5 6 7 8 9} [6 2] #{1 2 3 4 5 6 7 8 9} [6 3] #{1 2 3 4 5 6 8} [6 4] #{1 2 3 4 5 6 7 8 9} [6 5] #{1 2 3 4 5 6 7 8 9} [6 6] #{1 2 3 4 5 6 7 8 9} [6 7] #{1 2 3 4 5 6 7 8 9} [6 8] #{1 2 3 4 5 6 7 8 9}
                                     [7 0] #{1 2 3 4 5 6 7 8 9} [7 1] #{1 2 3 4 5 6 7 8 9} [7 2] #{1 2 3 4 5 6 7 8 9} [7 3] #{1 2 3 4 5 6 8} [7 4] #{1 2 3 4 5 6 7 8 9} [7 5] #{1 2 3 4 5 6 7 8 9} [7 6] #{1 2 3 4 5 6 7 8 9} [7 7] #{1 2 3 4 5 6 7 8 9} [7 8] #{1 2 3 4 5 6 7 8 9}
                                     [8 0] #{1 2 3 4 5 6 7 8 9} [8 1] #{1 2 3 4 5 6 7 8 9} [8 2] #{1 2 3 4 5 6 7 8 9} [8 3] #{1 2 3 4 5 6 8} [8 4] #{1 2 3 4 5 6 7 8 9} [8 5] #{1 2 3 4 5 6 7 8 9} [8 6] #{1 2 3 4 5 6 7 8 9} [8 7] #{1 2 3 4 5 6 7 8 9} [8 8] #{1 2 3 4 5 6 7 8 9}}})
           {[2 6] #{3 5 8} [2 8] #{3 5}})))

  (testing "X-Wing doesn't find wrong candidates in rows"
    (is (= (x-wing {:block-width 2
                    :block-height 2
                    :cells {[0 0] #{2 4}   [0 1] #{1}       [0 2] #{2 3 4}   [0 3] #{3 4}
                            [1 0] #{1 3 4} [1 1] #{1 3 4}   [1 2] #{1 2 3 4} [1 3] #{1 2 3 4}
                            [2 0] #{2 3 4} [2 1] #{1 2 3 4} [2 2] #{2 3}     [2 3] #{1 3 4}
                            [3 0] #{1 3}   [3 1] #{1 3 4}   [3 2] #{1 3 4}   [3 3] #{2}}})
           {})))

  (testing "X-Wing can remove candidates in rows"
    (is (= (x-wing {:block-width 2
                    :block-height 2
                    :cells {[0 0] #{2 4}   [0 1] #{2 3 4}   [0 2] #{1}       [0 3] #{3 4}
                            [1 0] #{1 3 4} [1 1] #{1 2 3 4} [1 2] #{1 2 3 4} [1 3] #{1 2 3 4}
                            [2 0] #{2 3 4} [2 1] #{2 3}     [2 2] #{1 3 4}   [2 3] #{1 3 4}
                            [3 0] #{1 3}   [3 1] #{1 2 3 4} [3 2] #{1 3 4}   [3 3] #{1 2}}})
           {[1 1] #{1 3 4} [3 1] #{1 3 4}}))))

;; Also check that two rows is not enough, they have to be the same!
;; Also that when there are three rows with two columns, and two of
;; them actually match, it's the two correct ones that we use
